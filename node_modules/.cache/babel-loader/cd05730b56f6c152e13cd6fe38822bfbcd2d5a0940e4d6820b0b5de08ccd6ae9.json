{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nconst Timer = targetDate => {\n  _s();\n  const countDownDate = new Date(targetDate).getTime();\n  const [countDown, setCountDown] = useState(countDownDate - new Date().getTime());\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCountDown(countDownDate - new Date().getTime());\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [countDownDate]);\n  return getReturnValues(countDown);\n};\n_s(Timer, \"+9zWhIOWADc8hK60aUgFV91+m8I=\");\n_c = Timer;\nconst getReturnValues = countDown => {\n  // calculate time left\n  const days = Math.floor(countDown / (1000 * 60 * 60 * 24));\n  const hours = Math.floor(countDown % (1000 * 60 * 60 * 24) / (1000 * 60 * 60));\n  const minutes = Math.floor(countDown % (1000 * 60 * 60) / (1000 * 60));\n  const seconds = Math.floor(countDown % (1000 * 60) / 1000);\n  return [days, hours, minutes, seconds];\n};\nexport { Timer };\nvar _c;\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"names":["useEffect","useState","Timer","targetDate","_s","countDownDate","Date","getTime","countDown","setCountDown","interval","setInterval","clearInterval","getReturnValues","_c","days","Math","floor","hours","minutes","seconds","$RefreshReg$"],"sources":["/Users/kirillkolesnikov/Documents/GitHub/test-timer/src/components/Timer/Timer.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nconst Timer = (targetDate) => {\n  const countDownDate = new Date(targetDate).getTime();\n\n  const [countDown, setCountDown] = useState(\n    countDownDate - new Date().getTime()\n  );\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCountDown(countDownDate - new Date().getTime());\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [countDownDate]);\n\n  return getReturnValues(countDown);\n};\n\nconst getReturnValues = (countDown) => {\n  // calculate time left\n  const days = Math.floor(countDown / (1000 * 60 * 60 * 24));\n  const hours = Math.floor(\n    (countDown % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n  );\n  const minutes = Math.floor((countDown % (1000 * 60 * 60)) / (1000 * 60));\n  const seconds = Math.floor((countDown % (1000 * 60)) / 1000);\n\n  return [days, hours, minutes, seconds];\n};\n\nexport { Timer };\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,MAAMC,KAAK,GAAIC,UAAU,IAAK;EAAAC,EAAA;EAC5B,MAAMC,aAAa,GAAG,IAAIC,IAAI,CAACH,UAAU,CAAC,CAACI,OAAO,CAAC,CAAC;EAEpD,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CACxCI,aAAa,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CACrC,CAAC;EAEDP,SAAS,CAAC,MAAM;IACd,MAAMU,QAAQ,GAAGC,WAAW,CAAC,MAAM;MACjCF,YAAY,CAACJ,aAAa,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC;IACpD,CAAC,EAAE,IAAI,CAAC;IAER,OAAO,MAAMK,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,EAAE,CAACL,aAAa,CAAC,CAAC;EAEnB,OAAOQ,eAAe,CAACL,SAAS,CAAC;AACnC,CAAC;AAACJ,EAAA,CAhBIF,KAAK;AAAAY,EAAA,GAALZ,KAAK;AAkBX,MAAMW,eAAe,GAAIL,SAAS,IAAK;EACrC;EACA,MAAMO,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACT,SAAS,IAAI,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;EAC1D,MAAMU,KAAK,GAAGF,IAAI,CAACC,KAAK,CACrBT,SAAS,IAAI,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,IAAK,IAAI,GAAG,EAAE,GAAG,EAAE,CACvD,CAAC;EACD,MAAMW,OAAO,GAAGH,IAAI,CAACC,KAAK,CAAET,SAAS,IAAI,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC,IAAK,IAAI,GAAG,EAAE,CAAC,CAAC;EACxE,MAAMY,OAAO,GAAGJ,IAAI,CAACC,KAAK,CAAET,SAAS,IAAI,IAAI,GAAG,EAAE,CAAC,GAAI,IAAI,CAAC;EAE5D,OAAO,CAACO,IAAI,EAAEG,KAAK,EAAEC,OAAO,EAAEC,OAAO,CAAC;AACxC,CAAC;AAED,SAASlB,KAAK;AAAG,IAAAY,EAAA;AAAAO,YAAA,CAAAP,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}